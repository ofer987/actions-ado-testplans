name: 'Cucumber to Azure DevOps Test Plans Sync'
author: 'PavanMudigonda'
description: 'A GitHub Action that Synchronizes Cucumber Test Cases and Test Results from GitHub to Azure DevOps'

branding:
  icon: 'repeat'
  color: 'red'

inputs:
  env:
    description: 'Test Environment'
    required: false
    default: 'QA'
  artifactory_token:
    description: 'JFROG TOKEN'
    required: true
  artifactory_user:
    description: 'JFROG USER'
    required: true
  github_token:
    description: 'GitHub API Access Token'
    default: ${{ github.token }}
    required: false
  test_cases_sync:  
    description: 'Test Cases Sync'
    required: true
    default: 'false'
  test_results_sync:
    description: 'Test Results Sync - Format Supported'
    required: false
    default: 'false'  
  ado_pat:
    description: 'Azure DevOps PAT'
    required: true
  ado_project_url:
    description: 'ADO Project URL'
    required: true
  ado_area_path:
    description: 'ADO Area Path'
    required: true 
  ado_iteration_path:
    description: 'ADO Iteration Path'
    required: true
  git_user_email:
    description: 'Default Github Actions Email'
    required: false
    default: 'actions@github.com'
  git_user_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'GitHub Actions'
  cucumber_path:
    description: 'Cucumber Path'
    required: false
    default: 'features'    
  cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'cucumber-ado-sync-${{ github.run_number }}'
  temp_cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'temp-cucumber-ado-sync-${{ github.run_number }}'    
  test_results_run_name:
    description: 'Test Result - Run NAme'
    required: false
    default: GHA-${{ github.run_number }}
  test_results_attached_files:
    description: 'Test Result '
    required: false
    default: 'false'
  test_results_path:
    description: 'Test Results Path'
    required: false
  test_results_format:
    description: 'Test Results Format'
    required: false
  test_results_test_plan_id:
    description: 'Test Results - Test Plan ID'
    required: true
  test_results_config:
    description: 'Test Results - Config'
    required: false
    default: ${{ runner.os }}-${{ runner.arch }}
  run_comment:
    description: 'Run Comment'
    required: false  
  run_result_comment:
    description: 'Run Result Comment'
    required: false   
  standard_specsync_json: 
    description: 'Using Own SpecSync Json'
    required: false
    default: 'true'
outputs:
  CUCUMBER_PR_URL:
    value: ${{ steps.pr_url_step.outputs.CUCUMBER_PR_URL }}
    description: Cucumber PR URL
  ADO_RUN_ID:
    value: ${{ steps.ado_run_step.outputs.ADO_RUN_ID_OUTPUT }}
    description: ADO RUN ID SHELL ARRAY
  ADO_RUN_URL:
    value: ${{ steps.ado_run_step.outputs.ADO_RUN_URL_OUTPUT }}
    description: ADO RUN URL SHELL ARRAY

runs:
  using: 'composite'
  steps:
      - name: Set Env Variables
        shell: bash
        run: |
          echo ADO_PROJECT_URL=${{ inputs.ado_project_url }} >> $GITHUB_ENV
          echo TEST_RESULTS_PATH=${{ inputs.test_results_path }} >> $GITHUB_ENV
          echo TEST_RESULTS_FORMAT=${{ inputs.test_results_format }} >> $GITHUB_ENV
          echo TEST_RESULTS_CONFIG=${{ inputs.test_results_config }} >> $GITHUB_ENV

      - name: download specsync json from jfrog
        env: 
          ARTIFACTORY_USER: ${{ inputs.artifactory_user }}
          ARTIFACTORY_TOKEN: ${{ inputs.artifactory_token }}
        working-directory: ${{ github.workspace }}
        if: ${{ inputs.standard_specsync_json }}
        shell: bash
        run: |
          curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O 'https://tr1.jfrog.io/artifactory/generic-local/devops-experience/cucumber/specsync.json'
          CWD=$PWD
          SPECSYNC_JSON_PATH=$CWD/specsync.json
          echo SPECSYNC_JSON_PATH=${SPECSYNC_JSON_PATH} >> $GITHUB_ENV
          echo "SpecSync Json Path: $SPECSYNC_JSON_PATH"
          SPECSYNC_JSON=$(find . -iname "specsync.json" | tr '\n' ',' )
          echo SPECSYNC_JSON=${SPECSYNC_JSON} >> $GITHUB_ENV
          echo "SpecSync Json: $SPECSYNC_JSON"

      - uses: TomaszKandula/variable-substitution@v1.0.1
        if: ${{ inputs.standard_specsync_json }}
        with:
          files: ${{ env.SPECSYNC_JSON_PATH }}
        env:
          remote.projectUrl: ${{ inputs.ado_project_url }}
          remote.user: ${{ inputs.ado_pat }}
          publishTestResults.testRunSettings.name: ${{ inputs.test_results_run_name }}-${{ inputs.env }} Env
          remote.testSuite.testPlanId: ${{ inputs.test_results_test_plan_id }}
          synchronization.areaPath.value: ${{ inputs.ado_area_path }}
          synchronization.iterationPath.value: ${{ inputs.ado_iteration_path }}

      - name: Download SpecSync License From Artifactory
        shell: bash
        env:
          ARTIFACTORY_TOKEN: ${{ inputs.artifactory_token }}
          ARTIFACTORY_USER: ${{ inputs.artifactory_user }}
        run: |
          curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O 'https://tr1.jfrog.io/artifactory/generic-local/devops-experience/specsync.lic'
          CWD=$PWD
          LICENSE_PATH=$CWD/specsync.lic
          echo LICENSE_PATH=${LICENSE_PATH} >> $GITHUB_ENV
          echo "SpecSync License Path: $LICENSE_PATH"
          
      - name: Set up .NET 7
        if: ${{ inputs.test_cases_sync || inputs.test_results_sync }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.0.x"

      - name: Install Dependencies
        if: ${{ inputs.test_cases_sync || inputs.test_results_sync }}
        shell: bash
        run: |
          export PATH="$PATH:/root/.dotnet/tools"
          dotnet new tool-manifest
          dotnet tool install SpecSync.AzureDevOps --version 3.4.0
          dotnet specsync version
                    
      - name: Run Test Case Synchronization
        if: ${{ inputs.test_cases_sync == 'true' }}
        shell: bash
        run: |
          find . -type f -name "*.feature" | while read line;
            do
              CWD=$PWD
              line=$(echo $line)
              DIR=$(dirname "$line")
              echo $DIR
              cd $DIR
              DIR="${DIR%/}"
              SUBDIR="${DIR##*/}"
              FILE=specsync.json
              if [ -f "$FILE" ]; then
              echo "$FILE exists."
              else 
                  echo "$FILE does not exist."
                  cp ${{ env.SPECSYNC_JSON_PATH }} ./
                  tmp=$(mktemp)
                  jq --arg a "$SUBDIR" '.remote.testSuite.name = $a' ./specsync.json > "$tmp" && mv "$tmp" ./specsync.json
              fi;
              dotnet specsync push --verbose --user "${{ inputs.ado_pat }}" --license ${{ env.LICENSE_PATH }};
              dotnet specsync pull --verbose --user "${{ inputs.ado_pat }}" --license ${{ env.LICENSE_PATH }};
              cd $CWD
            done;

      - name: Run Test Results Synchronization
        if: ${{ inputs.test_results_sync == 'true'}}
        id: ado_run_step
        shell: bash
        run: |
          TMP_HOME=$PWD
          find ${{ inputs.cucumber_path }} -type f -name "*.feature" | while read line;
            do
                CWD=$PWD
                line=$(echo $line)
                DIR=$(dirname "$line")
                echo $DIR
                cd $DIR
                DIR="${DIR%/}"
                SUBDIR="${DIR##*/}"
                FILE=specsync.json
                if [ -f "$FILE" ]; then
                echo "$FILE exists."
                else 
                    echo "$FILE does not exist."
                    cp ${{ env.SPECSYNC_JSON_PATH }} ./
                  tmp=$(mktemp)
                  jq --arg a "$SUBDIR" '.remote.testSuite.name = $a' ./specsync.json > "$tmp" && mv "$tmp" ./specsync.json
                fi
                FEATURE_NAME=$(basename $DIR)      
                dotnet specsync publish-test-results --license ${{ env.LICENSE_PATH }} --user "${{ inputs.ado_pat }}" -v --log output.txt --zeroExitCodeForWarnings -r "${{ inputs.test_results_path }}" -f "${{ inputs.test_results_format }}" -c "${{ inputs.test_results_config }}" --runName "${{ inputs.test_results_run_name }}-Env:${{ inputs.env }}-Suite:${FEATURE_NAME}" --runComment "${{ inputs.run_comment }}" --testResultComment "${{ inputs.run_result_comment }}" 2> /dev/null;
                cat output.txt;
                ADO_SUITE_RUN_URL=$(grep 'results as Test Run' output.txt | sed 's/.*[(] *//'| sed 's/).//g')
                echo "ADO_SUITE_RUN_URL=$ADO_SUITE_RUN_URL" >> $GITHUB_ENV
                echo "ADO_SUITE_RUN_URL=$ADO_SUITE_RUN_URL" >> $GITHUB_OUTPUT
                echo "TestSuite# $i [${DIR}](${ADO_SUITE_RUN_URL})" >> $GITHUB_STEP_SUMMARY
                ADO_RUN_ID=$(echo $ADO_SUITE_RUN_URL | awk -F'=' '{print $2;}' | sed 's|&_a||g')
                echo $ADO_RUN_ID >> $TMP_HOME/run_id.txt
                echo $ADO_SUITE_RUN_URL >> $TMP_HOME/run_url.txt
                cd $CWD
            done;
            ADO_PROJECT_URL=${ADO_PROJECT_URL}/_testManagement/runs?_a=runQuery
            OIFS=$IFS; IFS=$'\n'; ADO_RUN_ID_ARRAY=($(cat $TMP_HOME/run_id.txt)); IFS=$OIFS; echo "${ADO_RUN_ID_ARRAY[*]}"
            OIFS=$IFS; IFS=$'\n'; ADO_RUN_URL_ARRAY=($(cat $TMP_HOME/run_url.txt)); IFS=$OIFS; echo "${ADO_RUN_URL_ARRAY[*]}"
            OIFS=$IFS; IFS=$'\n'; ADO_RUN_ID_ARRAY=($(cat $TMP_HOME/run_id.txt)); IFS=$OIFS; echo "${ADO_RUN_ID_ARRAY[*]}"
            OIFS=$IFS; IFS=$'\n'; ADO_RUN_URL_ARRAY=($(cat $TMP_HOME/run_url.txt)); IFS=$OIFS; echo "${ADO_RUN_URL_ARRAY[*]}"
            echo "ADO_RUN_ID_OUTPUT=${ADO_RUN_ID_ARRAY[*]}" >> $GITHUB_ENV
            echo "ADO_RUN_URL_OUTPUT=${ADO_RUN_URL_ARRAY[*]}" >> $GITHUB_ENV          
            echo "ADO_RUN_ID_OUTPUT=${ADO_RUN_ID_ARRAY[*]}" >> $GITHUB_OUTPUT
            echo "ADO_RUN_URL_OUTPUT=${ADO_RUN_URL_ARRAY[*]}" >> $GITHUB_OUTPUT            
            rm -rf $TMP_HOME/run_id.txt
            rm -rf $TMP_HOME/run_url.txt


      - name: Erase SpecSync License Files
        if: always()
        shell: bash
        run: rm -rf ${{ inputs.cucumber_path }}/specsync.lic
        
      - uses: dorny/paths-filter@v2
        if: ${{ inputs.test_cases_sync == 'true' }}
        id: filter
        with:
          filters: |
            features:
              - added|deleted|modified: '**.feature'

      - name: Create Pull Request
        id: create_pr
        if: ${{ steps.filter.outputs.features == 'true' }}
        uses: peter-evans/create-pull-request@v4
        with:
          add-paths: '**.feature'
          token: ${{ inputs.github_token }}
          commit-message: Updated Features with Azure DevOps Tags
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: true
          branch: ${{ inputs.cucumber_branch_name }}
          delete-branch: true
          title: '[Cucumber Azure DevOps Sync] Automated Pull Request'
          body: |
            Updated Features with Azure DevOps Tags
            - Auto-generated by [cucumber-ado-sync][1]
            [1]: https://github.com/tr/cicd_gh-actions-ado-specsync/actions/runs/${{ github.run_id }}
          labels: |
            cucumber ado sync
          draft: false

      - name: Publish Build/Job Summary - PR URL
        if: ${{ inputs.test_cases_sync == 'true' }}
        id: pr_url_step
        shell: bash
        run: |
          echo "CUCUMBER_PR_URL=${{ steps.create_pr.outputs.pull-request-url }}" >> $GITHUB_OUTPUT
          echo "Cucumber PR URL: ${{ steps.create_pr.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY

