name: 'Cucumber to Azure DevOps Test Plans Sync'
author: 'PavanMudigonda'
description: 'A GitHub Action that Synchronizes Cucumber Test Cases and Test Results from GitHub to Azure DevOps'

branding:
  icon: 'repeat'
  color: 'red'

inputs:
  github_teams:
      description: 'GitHub Team Tag. Example @tr/pe-devx'
      required: false
  env:
    description: 'Test Environment'
    required: false
    default: 'QA'
  artifactory_token:
    description: 'JFROG TOKEN'
    required: true
  artifactory_user:
    description: 'JFROG USER'
    required: true
  github_token:
    description: 'GitHub API Access Token'
    default: ${{ github.token }}
    required: false
  test_cases_sync:  
    description: 'Test Cases Sync'
    required: true
    default: 'false'
  test_results_sync:
    description: 'Test Results Sync - Format Supported'
    required: false
    default: 'false'  
  ado_pat:
    description: 'Azure DevOps PAT'
    required: true
  ado_project_url:
    description: 'ADO Project URL'
    required: true
  git_user_email:
    description: 'Default Github Actions Email'
    required: false
    default: 'actions@github.com'
  git_user_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'GitHub Actions'
  cucumber_path:
    description: 'Cucumber Path'
    required: false
    default: './cucumber'    
  cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'cucumber-ado-sync-${{ github.run_id }}'
  temp_cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: temp-cucumber-ado-sync-${{ github.run_id }}
  test_results_run_name:
    description: 'Test Result - Run NAme'
    required: false
    default: GH-Actions-${{ github.run_id }}
  test_results_attached_files:
    description: 'Test Result '
    required: false
outputs:
  ado_test_run_url:
    value: ${{ steps.ado_run_step.outputs.ADO_RUN_URL }}
    description: ADO Test Run URL
  cucumber_pr_url:
    value: ${{ steps.ado_run_step.outputs.PR_URL }}
    description: Cucumber PR URL

runs:
  using: 'composite'
  steps:
      - name: Set Env Variables
        shell: bash
        run: |
          echo ADO_PROJECT_URL=${{ inputs.ado_project_url }} >> $GITHUB_ENV
          echo TEST_RESULTS_PATH=${{ inputs.test_results_path }} >> $GITHUB_ENV
          echo TEST_RESULTS_FORMAT=${{ inputs.test_results_format }} >> $GITHUB_ENV
          
      - uses: microsoft/variable-substitution@v1
        if: ${{ inputs.test_cases_sync || inputs.test_results_sync }}
        with:
          files: '${{ inputs.cucumber_path}}/*/specsync.json, ${{ inputs.cucumber_path}}/specsync-parent.json'
        env:
          remote.projectUrl: ${{ inputs.ado_project_url }}
          remote.user: ${{ inputs.ado_pat }}
          publishTestResults.runName: ${{ inputs.test_results_run_name }}-${{ inputs.env }} Environment

      - name: Download SpecSync License From Artifactory
        shell: bash
        env:
          ARTIFACTORY_TOKEN: ${{ inputs.artifactory_token }}
          ARTIFACTORY_USER: ${{ inputs.artifactory_user }}
        run: |
          curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O 'https://tr1.jfrog.io/artifactory/generic-local/devops-experience/specsync.lic'
          mv specsync.lic ${{ inputs.cucumber_path }}
          
      - name: Set up .NET 6
        if: ${{ inputs.test_cases_sync || inputs.test_results_sync }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "6.0.x"

      - name: Install Dependencies
        env:
          ADO_PROJECT_URL: ${{ inputs.ado_project_url }}      
        if: ${{ inputs.test_cases_sync || inputs.test_results_sync }}
        shell: bash
        run: |
          export PATH="$PATH:/root/.dotnet/tools"
          dotnet new tool-manifest
          dotnet tool install SpecSync.AzureDevOps --version 3.3.8-alpha20220829-1
          dotnet specsync version
                    
      - name: Run Test Case Synchronization
        env:
          ADO_PROJECT_URL: ${{ inputs.ado_project_url }}      
        if: ${{ inputs.test_cases_sync }}
        shell: bash
        run: |
          cd ${{ inputs.cucumber_path }}
          find * -iname "*specsync.json*" | while read line;
            do
              line=$(echo $line)
              DIR=$(dirname "$line")
              echo $DIR
              cd $DIR
              ls
              dotnet specsync push;
              dotnet specsync pull;
              cd ..
            done;

      - name: Run Test Results Synchronization with out Attachments
        if: ${{ inputs.test_results_sync == 'true' && inputs.test_results_attached_files != 'true' }}
        id: sync_without_attachment
        shell: bash
        run: |
          chmod +x ./SpecSync4AzureDevOps;
          ./SpecSync4AzureDevOps publish-test-results --zeroExitCodeForWarnings > output.txt;
          ADO_RUN_NUM_STRING="$( grep 'results as Test Run' output.txt | awk -F'[()]' '{print $2}')";
          ADO_RUN_NUM="$(echo $ADO_RUN_NUM_STRING | tr -dc '0-9' | sed 's/%//g')";
          echo ADO_RUN_NUM=$ADO_RUN_NUM >> $GITHUB_ENV
          echo "##[set-output name=ADO_RUN_NUM;]${ADO_RUN_NUM}";
          
      - name: Run Test Results Synchronization with Attachments
        env:
          ADO_PROJECT_URL: ${{ inputs.ado_project_url }}      
        if: ${{ inputs.test_results_sync == 'true' && inputs.test_results_attached_files == 'true' && always() }}
        id: sync_with_attachment
        shell: bash
        run: |
          chmod +x ./SpecSync4AzureDevOps;
          ./SpecSync4AzureDevOps publish-test-results --zeroExitCodeForWarnings --attachedFiles ${{ inputs.test_results_attached_files }} > output.txt;
          ADO_RUN_NUM_STRING="$( grep 'results as Test Run' output.txt | awk -F'[()]' '{print $2}')";
          ADO_RUN_NUM="$(echo $ADO_RUN_NUM_STRING | tr -dc '0-9' | sed 's/%//g')";
          echo ADO_RUN_NUM=$ADO_RUN_NUM >> $GITHUB_ENV;
          echo "##[set-output name=ADO_RUN_NUM;]${{ env.ADO_RUN_NUM }}";        
      - name: list files 
        if: always()
        shell: bash
        run: |
          ls -R

      - uses: dorny/paths-filter@v2
        if: ${{ steps.pre-ado-sync.outputs.features == 'true' && inputs.test_cases_sync == 'true' }}
        id: post-ado-sync
        with:
          base: ${{ github.ref }}
          filters: |
            features:
              - '${{ inputs.cucumber_path }}/**'

      #  Commit Cucumber Feature Files to triggering branch or cucumber-ado-sync branch
      - name: Commit updates feature files
        id: create_branch
        if: ${{ steps.post-ado-sync.outputs.features == 'true' && inputs.test_cases_sync == 'true' }}
        shell: bash
        env:
          GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}
          GIT_USER_EMAIL: ${{ inputs.git_user_email }}
          GIT_USER_NAME: ${{ inputs.git_user_name }}
          cucumber_path: ${{ inputs.cucumber_path }}
          CUCUMBER_BRANCH_NAME: ${{ inputs.cucumber_branch_name }}
          TEMP_CUCUMBER_BRANCH_NAME: ${{ inputs.temp_cucumber_branch_name }}
          ADO_PROJECT_URL: ${{ inputs.ado_project_url }}
        run: |
          git config --local user.email $GIT_USER_EMAIL
          git config --local user.name $GIT_USER_NAME
          if [ `git branch -r --list "origin/${{ env.CUCUMBER_BRANCH_NAME }}"` ]
          then
              git checkout -b ${{ env.TEMP_CUCUMBER_BRANCH_NAME }}
              git tag -a cucumber -m "cucumber"
              git commit -m "Updated cucumber branch"
              if [ $GITHUB_REF_NAME == "main" ]
              then
                git stash
              fi
              git checkout ${{ env.CUCUMBER_BRANCH_NAME }}
              git checkout ${{ env.TEMP_BADGE_BRANCH_NAME }} ${{ env.cucumber_path }}
              git add ${{ env.cucumber_path }}/
              git tag -a cucumber -m "cucumber"
              git commit -m "Updated Cucumber Feature Files"
              git push --force --tags
              git branch -D ${{ env.TEMP_CUCUMBER_BRANCH_NAME }}
          else
              git checkout -b ${{ env.CUCUMBER_BRANCH_NAME }}
              git commit -m "Updated Cucumber Feature Files"
              git push --set-upstream origin ${{ env.CUCUMBER_BRANCH_NAME }} --tags
          fi

      - name: Create Pull Request
        id: create_pr
        if: steps.create_branch.outcome == 'success'
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ inputs.github_token }}
          commit-message: Updated Features with Azure DevOps Tags
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: true
          branch: ${{ inputs.cucumber_branch_name }}
          delete-branch: true
          title: '[Cucumber Azure DevOps Sync] Automated Pull Request'
          body: |
            Updated Features with Azure DevOps Tags
            - Auto-generated by [cucumber-ado-sync][1]
            [1]: https://github.com/tr/cicd_gh-actions-ado-specsync/actions/runs/${{ github.run_id }}
          labels: |
            cucumber ado sync
            automated pr
          draft: false
          
      - name: Erase SpecSync License Files
        if: always()
        shell: bash
        run: rm -rf ${{ inputs.cucumber_path }}/specsync.lic

      - name: Output ADO RUN URL
        if: ${{ inputs.test_results_sync == 'true' }}
        id: ado_run_step
        shell: bash
        run: |
          echo "ADO_RUN_URL=${{ inputs.ado_project_url }}/_testManagement/runs?_a=runCharts&runId=${{ env.ADO_RUN_NUM }}" >> $GITHUB_ENV
          echo "Pull Request URL - ${{ steps.create_pr.outputs.pull-request-url }}"
          echo "##[set-output name=ADO_RUN_URL;]${{ env.ADO_RUN_URL }}"
          echo "##[set-output name=PR_URL;]${{ steps.create_pr.outputs.pull-request-url }}"

      - name: Publish Build/Job Summary - ADO RUN URL
        if: ${{ inputs.test_results_sync == 'true' }}
        shell: bash
        run: |
          cat >> ado-run-url.md << EOF
              ADO TEST RUN URL: ${{ env.ADO_RUN_URL }}
          EOF
          # Publish Job Summary
          cat ado-run-url.md >> $GITHUB_STEP_SUMMARY


      - name: Publish Build/Job Summary - PR URL
        if: ${{ inputs.test_cases_sync == 'true' }}
        shell: bash
        run: |
          cat >> pr-url.md << EOF
              Cucumber PR URL:  ${{ env.PR_URL }}
          EOF
          # Publish Job Summary
          cat pr-url.md >> $GITHUB_STEP_SUMMARY