name: 'Cucumber to Azure DevOps Test Plans Sync'
author: 'PavanMudigonda'
description: 'A GitHub Action that Synchronizes Cucumber Test Cases and Test Results from GitHub to Azure DevOps'

branding:
  icon: 'repeat'
  color: 'red'

inputs:
  artifactory_token:
    description: 'JFROG TOKEN'
    required: true
  artifactory_user:
    description: 'JFROG USER'
    required: true
  github_token:
    description: 'GitHub API Access Token'
    default: ${{ github.token }}
    required: false
  test_cases_sync:  
    description: 'Test Cases Sync'
    required: true
    default: 'false'
  test_results_sync:
    description: 'Test Results Sync - Format Supported'
    required: false
    default: 'false'  
  ado_pat:
    description: 'Azure DevOps PAT'
    required: true
  ado_project_url:
    description: 'ADO Project URL'
    required: true
  ado_area_path:
    description: 'ADO Area Path. Example: \\Release 1'
    required: false
  ado_iteration_path:
    description: 'ADO Iteration or Sprint Path. Example: \\Sprint 1'
    required: false
  cucumber_path:
    description: 'Path of Cucumber Features'
    required: false
  cucumber_language:
    description: 'Default Language of Cucumber Features'
    required: false
    default: 'en-US'
  test_case_tag_prefix:
    description: 'Test Case Tag Prefix'
    required: false
    default: 'TC'
  test_suite_id:
    description: 'ID of Test Suite. Only if you have not specified test_suite_name'
    required: false
  test_suite_name:
    description: 'Name of Test Suite. Only if you have not specified test_suite_id'
    required: false    
  default_test_case_status:
    description: 'Default test case status. Defaults to Design'
    required: false
    default: 'Design'
  git_user_email:
    description: 'Default Github Actions Email'
    required: false
    default: 'actions@github.com'
  git_user_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'GitHub Actions'
  cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'cucumber-ado-sync'
  temp_cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'temp-cucumber-ado-sync'
  test_configuration_name:
    description: 'Test Result - Configuration Run name'
    required: false
    default: ${{ runner.os }}-${{ runner.arch }}
  test_configuration_id:
    description: 'Test Result - Configuration Run ID'
    required: false
  test_results_file_path:
    description: 'Test Result - File Path'
    required: false
  test_results_file_format:
    description: 'Test Result - File Format'
    required: false    
  test_results_run_comment:
    description: 'Test Result - Run Comment'
    required: false
    default: GH Action-${{ github.run_id}}
  test_results_run_name:
    description: 'Test Result - Run NAme'
    required: false
    default: GH-Actions-${{ github.run_id }}
  test_results_run_type:
    description: 'Test Result - Run Type'
    required: false
    default: 'automated'
  test_results_run_result_comment:
    description: 'Test Result - Run Result Comment'
    required: false
    default: 'As Expected'
  test_results_test_suite_name:
    description: 'Test Result - Test Suite Name'
    required: false
  test_results_test_plan_id:
    description: 'Test Result - Test Plan ID'
    required: false
  test_results_create_sub_results:
    description: 'Test Result - Create Sub Results'
    required: false
    default: 'false'
  test_results_treat_inconclusive_as:
    description: 'Test Result - Treat Inconclusive As'
    required: false
    default: 'NotExecuted'
  attachments_base_folder:
    description: 'Attachments Base Folder to attache to test cases while creation'
    required: false
  test_results_attached_files:
    description: 'Name of Attachments to be attached to each test case while publishing test results'
    required: false    
  disable_feature_file_auto_updates:
    description: 'Do you want to disable auto updates to feature files'
    required: false
    default: 'false'
  skip_scenario_prefix_title:   
    description: 'Do you want to skip adding Scenario or Scenario Outline Prefix title to Test Cases'
    required: false
    default: 'false'

outputs:
  ado_test_run_url:
    value: ${{ steps.ado_run_step.outputs.ADO_RUN_URL }}
    description: ADO Test Run URL

runs:
  using: 'composite'
  steps:
      - name: Check If there is a change in Feature Files from last commit/trigger branch
        uses: dorny/paths-filter@v2
        if: ${{ inputs.test_cases_sync }}    
        id: pre-ado-sync
        with:
          base: ${{ env.GITHUB_SHA }}
          filters: |
            features:
             - '${{ inputs.cucumber_path }}/**'

      - name: Check If there is a change in Test Results Path in local
        uses: dorny/paths-filter@v2
        if: ${{ inputs.test_results_sync }} 
        id: post-test-execution
        with:
          base: ${{ env.GITHUB_SHA }}
          filters: |
            test_results_file_path:
             - '${{ inputs.test_results_file_path }}/**'

      - name: Create SpecSync.json file
        if: ${{ ( inputs.test_cases_sync || inputs.test_results_sync ) && (steps.pre-ado-sync.outputs.features || steps.post-test-execution.outputs.test_results_file_path ) && always() }}
        shell: bash
        run: |
          cat > ./specsync.json <<EOF
            {
                "$schema": "https://schemas.specsolutions.eu/specsync4azuredevops-config-latest.json",
                "compatibilityVersion": "3.3",
                "toolSettings": {
                  "licensePath": "specsync.lic",
                  "disableStats": true,
                  "outputLevel": "normal"
                },   
                "remote": {
                  "projectUrl": "https://dev.azure.com/tr-ihn-sandbox/Azure%20DevOps%20Training",
                  "user":"ADO_PAT",
                  "testSuite": {
                          "name": "TEST_SUITE_NAME","id": 1
                        }
                },
                "local": {
                      "featureFileSource": {
                        "type": "folder",
                        "folder": "features"
                      },
                      "defaultFeatureLanguage":"en-US"
                    },
                    "publishTestResults": {
                      "testConfiguration": {
                            "name": "Windows 10"
                      },
                      "testResult": {
                      "filePath": "test-result.trx",
                      "fileFormat": "TRX"
                        },
                        "treatInconclusiveAs":"NotExecuted",
                        "createSubResults": true,
                        "runName": "test",
                        "runType": "automated",
                        "runComment": "test",
                        "testResultComment": "test",
                        "testSuite": {
                          "name": "test","id": 2,
                          "testPlanId": 1
                          }
                        },               
                    "synchronization": {
                        "attachments": { "enabled": true,
                        "baseFolder": "TestModels"
                      },
                      "disableLocalChanges": false,
                      "testCaseTagPrefix": "ADO",
                  
                      "pull": {
                        "enabled": true,
                        "enableCreatingScenariosForNewTestCases": true
                      },
                  
                      "automation": {
                        "enabled": true,
                        "condition": "not @manual"
                      },
                  
                      "state": {
                        "setValueOnChangeTo": "Design"
                      },
                  
                      "areaPath": {
                        "mode": "setOnLink",
                        "value": "MyArea"
                      },
                      "iterationPath": {
                        "mode": "setOnLink",
                        "value": "Sprint 1"
                      },
                      "links": [
                        {
                          "targetWorkItemType": "ProductBacklogItem",
                          "tagPrefix": "story",
                          "relationship": "Parent",
                          "mode": "createIfMissing"
                        },
                        {
                          "tagPrefix": "bug"
                        }
                      ],
                      "format": {
                        "useExpectedResult": false,
                        "syncDataTableAsText": false,
                        "prefixBackgroundSteps": true,
                        "prefixTitle": true,
                        "showParameterListStep": "whenUnusedParameters"
                      }
                    },
                    "customizations": {
                        "ignoreNotSupportedLocalTags": {
                          "enabled": true
                        },
                        "ignoreTestCaseSteps": {
                          "enabled": true,
                          "ignoredPrefixes": [ "COMMENT" ]
                        },
                        "ignoreTestCaseTags": {
                          "enabled": true,
                          "tags": [ "ignore" ]
                        },  
                        "resetTestCaseState": {
                          "enabled": true,
                          "state": "Ready",
                          "condition": "@ready"
                        },
                        "customFieldUpdates": {
                          "enabled": true,
                          "updates": {
                          "System.Description": "Feature Name: {feature-name} Feature Description: {feature-description} Feature File Name: {feature-file-name} Feature File Folder: {feature-file-folder} Feature File Path: {feature-file-path}"
                          },
                            "multiSuitePublishTestResults": {
                            "enabled": true,
                            "testPlanId": "${TEST_PLAN_ID}",
                            "includeSubSuites": true 
                          }
                        }                    
                      }                          
              }
          EOF

      - uses: microsoft/variable-substitution@v1
        if: ${{ ( inputs.test_cases_sync || inputs.test_results_sync ) && (steps.pre-ado-sync.outputs.features || steps.post-test-execution.outputs.test_results_file_path ) && always() }}
        with:
          files: './specsync.json'
        env:
          remote.projectUrl: ${{ inputs.ado_project_url }}
          remote.user: ${{ inputs.ado_pat }}
          remote.testSuite.name: ${{ inputs.test_suite_name }}
          remote.testSuite.id: ${{ inputs.test_suite_id }}
          local.featureFileSource.folder: ${{ inputs.cucumber_path }}
          local.defaultFeatureLanguage: ${{ inputs.cucumber_language }}
          synchronization.testCaseTagPrefix: ${{ inputs.test_case_tag_prefix }}
          synchronization.state.setValueOnChangeTo: ${{ inputs.default_test_case_status }}
          synchronization.areaPath.value: ${{ inputs.ado_area_path }}
          synchronization.iterationPath.value: ${{ inputs.ado_iteration_path }}
          synchronization.attachments.baseFolder: ${{ inputs.attachments_base_folder }}
          synchronization.disableLocalChanges: ${{ inputs.disable_feature_file_auto_updates }}
          synchronization.format.prefixTitle: ${{ inputs.skip_scenario_prefix_title }}
          publishTestResults.testConfiguration.name: ${{ inputs.test_configuration_name }}
          publishTestResults.testConfiguration.id: ${{ inputs.test_configuration_id }}
          publishTestResults.testResult.filePath: ${{ inputs.test_results_file_path }}
          publishTestResults.testResult.fileFormat: ${{ inputs.test_results_file_format }}
          publishTestResults.runComment: ${{ inputs.test_results_run_comment }}
          publishTestResults.runName: ${{ inputs.test_results_run_name }}
          publishTestResults.runType: ${{ inputs.test_results_run_type }}
          publishTestResults.testResultComment: ${{ inputs.test_results_run_result_comment }}
          publishTestResults.testSuite.name: ${{ inputs.test_results_test_suite_name }}
          publishTestResults.testSuite.id: ${{ inputs.test_suite_id }}
          publishTestResults.testSuite.testPlanId: ${{ inputs.test_results_test_plan_id }}  
          publishTestResults.createSubResults: ${{ inputs.test_results_create_sub_results }}
          customizations.multiSuitePublishTestResults.testPlanId: ${{ inputs.test_results_test_plan_id }}
          

      - name: retain either name of id variable in specsync json file based on user input
        if: ${{ ( inputs.test_cases_sync || inputs.test_results_sync ) && (steps.pre-ado-sync.outputs.features || steps.post-test-execution.outputs.test_results_file_path ) && always() }}
        shell: bash
        run: |
          # Handle Test Suite ID and Test Suite Name for Test Cases Publishing as only one of them is allowed
          if [[ '${inputs.test_suite_name}' != '' ]];
          then
            sed '/"id": 1/d' ./specsync.json;
          elif [[ '${inputs.test_suite_id}' != '' ]];
          then
            sed '/"name": "TEST_SUITE_NAME",/d' ./specsync.json;
          elif [[ '${inputs.test_results_sync }' == 'true' ]];
          then
            sed '/"name": "TEST_SUITE_NAME",/d' ./specsync.json;
          else
            echo "either enter test_suite_name or test_suite_id";
          fi
          
          # Handle Test Suite ID and Test Suite Name for Test Results Publishing as only one of them is allowed
          if [[ '${inputs.test_results_sync}' == 'true' && '${inputs.test_results_test_suite_name}' != '' ]];
          then
            sed '/"id": 2,/d' ./specsync.json;
          elif [[ '${inputs.test_results_sync}' == 'true' && '${inputs.test_suite_id}' != '' ]];
          then
            sed '/"name": "test",/d' ./specsync.json;
          elif [[ '${inputs.test_results_sync}' == 'true' && '${inputs.test_suite_name}' != '' ]];
          then
            sed '/,"id": 1/d' ./specsync.json;
          else
            sed '/"name": "test",/d' ./specsync.json;
          fi

          # Handle Condition where user didn't select Attachment Base folder
          if [[ '${inputs.attachments_base_folder}' == '' ]];
          then
            sed sed -i 's/"attachments": { "enabled": true,/"attachments": { "enabled": false,/g' ./specsync.json;
          fi

      - name: Download SpecSync License From Artifactory
        shell: bash
        env:
          ARTIFACTORY_TOKEN: ${{ inputs.ARTIFACTORY_TOKEN }}
          ARTIFACTORY_USER: ${{ inputs.ARTIFACTORY_USER }}
        run: |
          curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O 'https://tr1.jfrog.io/artifactory/generic-local/devops-experience/specsync.lic'
          
      - name: Set up .NET 6
        if: ${{ ( inputs.test_cases_sync || inputs.test_results_sync ) && (steps.pre-ado-sync.outputs.features || steps.post-test-execution.outputs.test_results_file_path ) && always() }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "6.0.x"

      - name: Install Dependencies
        if: ${{ ( inputs.test_cases_sync || inputs.test_results_sync ) && (steps.pre-ado-sync.outputs.features || steps.post-test-execution.outputs.test_results_file_path ) && always() }}
        shell: bash
        run: |
          sudo apt install zip unzip
          export PATH="$PATH:/root/.dotnet/tools";
          wget -O SpecSync.zip https://www.specsolutions.eu/media/specsync/SpecSync.AzureDevOps.3.3.6-linux-x64.zip && unzip SpecSync.zip;
          chmod +x SpecSync4AzureDevOps;
                    
      - name: Run Test Case Synchronization
        if: ${{ steps.pre-ado-sync.outputs.features && inputs.test_cases_sync && always() }}
        shell: bash
        run: |
          chmod +x ./SpecSync4AzureDevOps;
          ./SpecSync4AzureDevOps push ./specsync.json;
          ./SpecSync4AzureDevOps pull ./specsync.json;

      - name: Run Test Results Synchronization with out Attachments
        if: ${{ inputs.test_results_sync == 'true' && inputs.test_results_attached_files == '' && always() }}
        id: sync_without_attachment
        shell: bash
        run: |
          chmod +x ./SpecSync4AzureDevOps;
          ./SpecSync4AzureDevOps publish-test-results --zeroExitCodeForWarnings ./specsync.json > output.txt;
          ADO_RUN_NUM_STRING="$( grep 'results as Test Run' output.txt | awk -F'[()]' '{print $2}')";
          ADO_RUN_NUM="$(echo $ADO_RUN_NUM_STRING | tr -dc '0-9' | sed 's/%//g')";
          echo ADO_RUN_NUM=$ADO_RUN_NUM >> $GITHUB_ENV
          echo "##[set-output name=ADO_RUN_NUM;]${ADO_RUN_NUM}";
          
      - name: Run Test Results Synchronization with Attachments
        if: ${{ inputs.test_results_sync == 'true' && inputs.test_results_attached_files != '' && always() }}
        id: sync_with_attachment
        shell: bash
        run: |
          chmod +x ./SpecSync4AzureDevOps;
          ./SpecSync4AzureDevOps publish-test-results --zeroExitCodeForWarnings --attachedFiles ${{ inputs.test_results_attached_files }} ./specsync.json > output.txt;
          ADO_RUN_NUM_STRING="$( grep 'results as Test Run' output.txt | awk -F'[()]' '{print $2}')";
          ADO_RUN_NUM="$(echo $ADO_RUN_NUM_STRING | tr -dc '0-9' | sed 's/%//g')";
          echo ADO_RUN_NUM=$ADO_RUN_NUM >> $GITHUB_ENV;
          echo "##[set-output name=ADO_RUN_NUM;]${ADO_RUN_NUM}";

      - name: Output ADO RUN URL
        if: always()
        id: ado_run_step
        shell: bash
        run: |
          ADO_RUN_URL=https://dev.azure.com/tr-ihn-sandbox/Azure-DevOps-Training/_testManagement/runs?_a=runCharts&runId=${{ env.ADO_RUN_NUM }}
          echo ADO_RUN_URL=$ADO_RUN_URL >>GITHUB_ENV;
          echo "##[set-output name=ADO_RUN_URL;]${ADO_RUN_URL}";

      - uses: dorny/paths-filter@v2
        if: ${{ steps.pre-ado-sync.outputs.features && inputs.test_cases_sync && always()  }}
        id: post-ado-sync
        with:
          base: ${{ github.ref }}
          filters: |
            features:
             - '${{ inputs.cucumber_path }}/**'

      #  Commit Cucumber Feature Files to triggering branch or cucumber-ado-sync branch
      - name: Commit updates feature files
        if: ${{ steps.post-ado-sync.outputs.features == 'true' && inputs.test_cases_sync == 'true' }}
        shell: bash
        env:
          GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}
          GIT_USER_EMAIL: ${{ inputs.git_user_email }}
          GIT_USER_NAME: ${{ inputs.git_user_name }}
          cucumber_path: ${{ inputs.cucumber_path }}
          CUCUMBER_BRANCH_NAME: ${{ inputs.cucumber_branch_name }}
          TEMP_CUCUMBER_BRANCH_NAME: ${{ inputs.temp_cucumber_branch_name }}
        run: |
          git config --local user.email $GIT_USER_EMAIL
          git config --local user.name $GIT_USER_NAME
          if [ $GITHUB_REF_NAME != "main" ]
          then
            git pull --ff -q
            git add ${{ env.cucumber_path }}
            git commit -m 'Updated Cucumber Gherkins Features'
            git push
          fi
          git add ${{ env.cucumber_path }}/
          if [ `git branch -r --list "origin/${{ env.CUCUMBER_BRANCH_NAME }}"` ]
          then
              git checkout -b ${{ env.TEMP_CUCUMBER_BRANCH_NAME }}
              git commit -m "Updated cucumber branch"
              if [ $GITHUB_REF_NAME == "main" ]
              then
                git stash
              fi
              git checkout ${{ env.CUCUMBER_BRANCH_NAME }}
              git checkout ${{ env.TEMP_BADGE_BRANCH_NAME }} ${{ env.cucumber_path }}
              git add ${{ env.cucumber_path }}/
              git commit -m "Updated Cucumber Feature Files"
              git push --force
              git branch -D ${{ env.TEMP_CUCUMBER_BRANCH_NAME }}
          else
              git checkout -b ${{ env.CUCUMBER_BRANCH_NAME }}
              git commit -m "Updated Cucumber Feature Files"
              git push --set-upstream origin ${{ env.CUCUMBER_BRANCH_NAME }}
          fi
