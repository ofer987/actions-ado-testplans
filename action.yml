name: 'Cucumber to Azure DevOps Test Plans Sync'
author: 'PavanMudigonda'
description: 'A GitHub Action that Synchronizes Cucumber features in GitHub Repo with Azure DevOps'

branding:
  icon: 'repeat'
  color: 'red'

inputs:
  github_token:
    description: 'GitHub API Access Token'
    default: ${{ github.token }}
    required: false
  ado_pat:
    description: 'Azure DevOps PAT'
    required: true
  ado_project_url:
    description: 'ADO Project URL'
    required: true
  ado_area_path:
    description: 'ADO Area Path. Example: \\Release 1'
    required: true
  ado_iteration_path:
    description: 'ADO Iteration or Sprint Path. Example: \\Sprint 1'
    required: true
  cucumber_path:
    description: 'Path of Cucumber Features'
    required: true
  cucumber_language:
    description: 'Default Language of Cucumber Features'
    required: false
    default: 'en-US'
  test_case_tag_prefix:
    description: 'Test Case Tag Prefix'
    required: false
    default: 'ADO'
  test_suite_id:
    description: 'ID of Test Suite. Only if you have not specified test_suite_name'
    required: true
  test_suite_name:
    description: 'Name of Test Suite. Only if you have not specified test_suite_id'
    required: true    
  default_test_case_status:
    description: 'Default test case status. Defaults to Design'
    required: false
    default: 'Design'
  git_user_email:
    description: 'Default Github Actions Email'
    required: false
    default: 'actions@github.com'
  git_user_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'GitHub Actions'
  cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'cucumber-ado-sync'
  temp_cucumber_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'temp-cucumber-ado-sync'

runs:
  using: 'composite'
  steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Create SpecSync.json file
        shell: bash
        run: |
          cat > ./specsync.json <<EOF
          {
            "$schema": "https://schemas.specsolutions.eu/specsync4azuredevops-config-latest.json",
            "compatibilityVersion": "3.3",
            "toolSettings": {
              "licensePath": "specsync.lic",
              "disableStats": true,
              "outputLevel": "normal"
            },   
            "remote": {
              "projectUrl": "https://dev.azure.com/tr-ihn-sandbox/Azure%20DevOps%20Training",
              "user":"ADO_PAT",
              "testSuite": {
                      "name": "TEST_SUITE_NAME",
                      "id": 1
                    }
            },
            "local": {
                  "featureFileSource": {
                    "type": "folder",
                    "folder": "features"
                  },
                  "defaultFeatureLanguage":"en-US"
                },
                "synchronization": {
                  "disableLocalChanges": false,
                  "testCaseTagPrefix": "ADO",
              
                  "pull": {
                    "enabled": true,
                    "enableCreatingScenariosForNewTestCases": true
                  },
              
                  "automation": {
                    "enabled": true,
                    "condition": "not @manual"
                  },
              
                  "state": {
                    "setValueOnChangeTo": "Design"
                  },
              
                  "areaPath": {
                    "mode": "setOnLink",
                    "value": "MyArea"
                  },
                  "iterationPath": {
                    "mode": "setOnLink",
                    "value": "Sprint 1"
                  },
                  "links": [
                    {
                      "targetWorkItemType": "ProductBacklogItem",
                      "tagPrefix": "story",
                      "relationship": "Child",
                      "mode": "createIfMissing"
                    },
                    {
                      "tagPrefix": "bug"
                    }
                  ],
                  "format": {
                    "useExpectedResult": false,
                    "syncDataTableAsText": false,
                    "prefixBackgroundSteps": true,
                    "prefixTitle": true,
                    "showParameterListStep": "whenUnusedParameters"
                  }
                },
                "customizations": {
                    "ignoreTestCaseSteps": {
                      "enabled": true,
                      "ignoredPrefixes": [ "COMMENT" ]
                    },
                    "ignoreTestCaseTags": {
                      "enabled": true,
                      "tags": [ "ignore" ]
                    },  
                    "resetTestCaseState": {
                      "enabled": true,
                      "state": "Ready",
                      "condition": "@ready"
                    }
                  }                          
          }
          EOF
          
      - uses: dorny/paths-filter@v2
        id: pre-ado-sync
        with:
          base: ${{ env.GITHUB_SHA }}
          filters: |
            features:
             - '${{ inputs.cucumber_path }}/**'

      - name: Set up .NET 6
        if: steps.pre-ado-sync.outputs.features == 'true'
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: "6.0.x"

      - name: Install SpecSync Nuget Package
        if: steps.pre-ado-sync.outputs.features == 'true'
        shell: bash
        run: |
          sudo apt install zip unzip
          export PATH="$PATH:/root/.dotnet/tools";
          
      - name: Install SpecSync
        if: steps.pre-ado-sync.outputs.features == 'true'
        shell: bash
        run:
          wget -O SpecSync.zip https://www.specsolutions.eu/media/specsync/SpecSync.AzureDevOps.3.3.6-linux-x64.zip && unzip SpecSync.zip;
          chmod +x SpecSync4AzureDevOps
          
      - uses: microsoft/variable-substitution@v1
        if: steps.pre-ado-sync.outputs.features == 'true'
        with:
          files: './specsync.json'
        env:
          remote.projectUrl: ${{ inputs.ado_project_url }}
          remote.user: ${{ inputs.ado_pat }}
          remote.testSuite.name: ${{ inputs.test_suite_name }}
          remote.testSuite.id: ${{ inputs.test_suite_id }}
          local.featureFileSource.folder: ${{ inputs.cucumber_path }}
          local.defaultFeatureLanguage: ${{ inputs.cucumber_language }}
          synchronization.testCaseTagPrefix: ${{ inputs.test_case_tag_prefix }}
          synchronization.state.setValueOnChangeTo: ${{ inputs.default_test_case_status }}
          synchronization.areaPath.value: ${{ inputs.ado_area_path }}
          synchronization.iterationPath.value: ${{ inputs.ado_iteration_path }}

      - name: retain either name of id variable in specsync json file based on user input
        if: steps.pre-ado-sync.outputs.features == 'true'
        shell: bash
        run: |
          if [[ '${inputs.test_suite_name}' != '' ]];
          then
            sed '/"id": "TEST_SUITE_ID"/d' ./specsync.json
          else
            sed '/"id": 1/d' ./specsync.json
          fi
          
      - name: Run SpecSync
        if: steps.pre-ado-sync.outputs.features == 'true'
        shell: bash
        run: |
          chmod +x ./SpecSync4AzureDevOps;
          ./SpecSync4AzureDevOps push ./specsync.json
          ./SpecSync4AzureDevOps pull ./specsync.json
          
      - uses: dorny/paths-filter@v2
        if: always()
        id: post-ado-sync
        with:
          filters: |
            features:
             - '${{ inputs.cucumber_path }}/**'

      #  Commit Cucumber Feature Files to triggering branch or cucumber-ado-sync branch
      - name: Commit updates feature files
        if: ${{ steps.post-ado-sync.outputs.features == 'true' && always() }}
        shell: bash
        env:
          GITHUB_REF_NAME: ${{ env.GITHUB_REF_NAME }}
          GIT_USER_EMAIL: ${{ inputs.git_user_email }}
          GIT_USER_NAME: ${{ inputs.git_user_name }}
          cucumber_path: ${{ inputs.cucumber_path }}
          CUCUMBER_BRANCH_NAME: ${{ inputs.cucumber_branch_name }}
          TEMP_CUCUMBER_BRANCH_NAME: ${{ inputs.temp_cucumber_branch_name }}
        run: |
          git config --local user.email $GIT_USER_EMAIL
          git config --local user.name $GIT_USER_NAME
          if [ $GITHUB_REF_NAME != "main" ]
          then
            git pull --ff -q
            git add ${{ env.cucumber_path }}
            git commit -m 'Updated Cucumber Gherkins Features'
            git push
          fi
          git add ${{ env.cucumber_path }}/
          if [ `git branch -r --list "origin/${{ env.CUCUMBER_BRANCH_NAME }}"` ]
          then
              git checkout -b ${{ env.TEMP_CUCUMBER_BRANCH_NAME }}
              git commit -m "Updated cucumber branch"
              if [ $GITHUB_REF_NAME == "main" ]
              then
                git stash
              fi
              git checkout ${{ env.CUCUMBER_BRANCH_NAME }}
              git checkout ${{ env.TEMP_BADGE_BRANCH_NAME }} ${{ env.cucumber_path }}
              git add ${{ env.cucumber_path }}/
              git commit -m "Updated Cucumber Feature Files"
              git push --force
              git branch -D ${{ env.TEMP_CUCUMBER_BRANCH_NAME }}
          else
              git checkout -b ${{ env.CUCUMBER_BRANCH_NAME }}
              git commit -m "Updated Cucumber Feature Files"
              git push --set-upstream origin ${{ env.CUCUMBER_BRANCH_NAME }}
          fi