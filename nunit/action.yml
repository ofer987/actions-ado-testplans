name: 'NUnit to Azure DevOps Test Plans Sync'
author: 'PavanMudigonda'
description: 'A GitHub Action that Synchronizes NUnit Test Cases and Test Results from GitHub to Azure DevOps'

branding:
  icon: 'repeat'
  color: 'red'

inputs:
  env:
    description: 'Test Environment'
    required: false
    default: 'QA'
  artifactory_token:
    description: 'JFROG TOKEN'
    required: true
  artifactory_user:
    description: 'JFROG USER'
    required: true
  github_token:
    description: 'GitHub API Access Token'
    default: ${{ github.token }}
    required: false
  test_cases_sync:  
    description: 'Test Cases Sync'
    required: true
    default: 'false'
  test_results_sync:
    description: 'Test Results Sync - Format Supported'
    required: false
    default: 'false'  
  ado_pat:
    description: 'Azure DevOps PAT'
    required: true
  ado_project_url:
    description: 'ADO Project URL'
    required: true
  git_user_email:
    description: 'Default Github Actions Email'
    required: false
    default: 'actions@github.com'
  git_user_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'GitHub Actions'
  nunit_path:
    description: 'NUnit Path'
    required: false
    default: 'features'    
  nunit_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'nunit-ado-sync-${{ github.run_number }}'
  temp_nunit_branch_name:
    description: 'Default Github Actions Name'
    required: false
    default: 'temp-nunit-ado-sync-${{ github.run_number }}'    
  test_results_run_name:
    description: 'Test Result - Run NAme'
    required: false
    default: GHA-${{ github.run_number }}
  test_results_path:
    description: 'Test Results Path'
    required: false
  test_results_format:
    description: 'Test Results Format'
    required: false
    default: 'trx'
  test_results_test_plan_id:
    description: 'Test Results - Test Plan ID'
    required: false
  test_results_config:
    description: 'Test Results - Config'
    required: false
    default: ${{ runner.os }}-${{ runner.arch }}
  run_comment:
    description: 'Run Comment'
    required: false  
  run_result_comment:
    description: 'Run Result Comment'
    required: false      
outputs:
  ado_test_run_url:
    value: ${{ steps.ado_run_step.outputs.ADO_RUN_URL }}
    description: ADO Test Run URL
  ado_test_run_id:
    value: ${{ steps.ado_run_step.outputs.ADO_RUN_ID }}
    description: ADO Test Run URL    
  nunit_pr_url:
    value: ${{ steps.pr_url_step.outputs.NUNIT_PR_URL }}
    description: NUnit PR URL

runs:
  using: 'composite'
  steps:
  - name: Checkout
    uses: actions/checkout@v3
    with:
      fetch-depth: 0

  # Install the .NET Core workload
  - name: Install .NET Core
    uses: actions/setup-dotnet@v3
    with:
      dotnet-version: 7.0.x

  # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
  - name: Setup MSBuild.exe
    uses: microsoft/setup-msbuild@v1.3
    
  - name: Install Dependencies
    shell: bash
    run: |
      export PATH="$PATH:/root/.dotnet/tools"
      dotnet new tool-manifest
      dotnet tool install --local SpecSync.AzureDevOps --version 3.4.1
      dotnet specsync version

  - name: Download SpecSync License From Artifactory
    shell: bash
    env:
      ARTIFACTORY_TOKEN: ${{ inputs.artifactory_token }}
      ARTIFACTORY_USER: ${{ inputs.artifactory_user }}
    run: |
      curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_TOKEN} -O 'https://tr1.jfrog.io/artifactory/generic-local/devops-experience/specsync.lic'
      NUNIT_DIRNAME=$(dirname ${{ inputs.nunit_path }} )
      mv specsync.lic ${NUNIT_DIRNAME}

  - name: Run Test Case Synchronization
    if: ${{ inputs.test_cases_sync == 'true' }}
    shell: bash
    run: |
      find . -type f -name "specsync.json" | while read line;
        do
          CWD=$PWD
          line=$(echo $line)
          DIR=$(dirname "$line")
          echo $DIR
          cd $DIR
          ls
          dotnet tool restore
          dotnet specsync push --user "${{ inputs.ado_pat }}";
          dotnet specsync pull --user "${{ inputs.ado_pat }}";
          cd $CWD
        done;      
      
  - uses: dorny/paths-filter@v2
    if: ${{ inputs.test_cases_sync == 'true' }}
    id: filter
    with:
      filters: |
        code:
          - added|deleted|modified: '**.cs'
      
  - name: Create Pull Request
    id: create_pr
    if: ${{ steps.filter.outputs.code == 'true' }}
    uses: peter-evans/create-pull-request@v4.2.3
    with:
      add-paths: '**.cs'
      token: ${{ github.token }}
      commit-message: Updated CS with Azure DevOps Tags
      committer: GitHub <noreply@github.com>
      author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
      signoff: true
      branch: ado-sync-${{ github.run_id }}
      delete-branch: true
      title: '[NUnit Azure DevOps Sync] Automated Pull Request'
      body: |
        Updated Features with Azure DevOps Tags
        - Auto-generated by [ado-testplans-sync][1]
        [1]: https://github.com/tr/cicd_gh-actions-ado-testplans-sync/actions/runs/${{ github.run_id }}
      labels: |
        ado sync
      draft: false

  # Execute all unit tests in the solution
  - name: Run Test Results Synchronization
    if: ${{ inputs.test_results_sync == 'true' }}
    shell: bash
    run: |
      dotnet specsync publish-test-results --testResultFile ${{ inputs.test_results_path }}

  - name: Erase SpecSync License Files
    if: always()
    shell: bash
    run: rm -rf **/specsync.lic

  - name: Publish Build/Job Summary - PR URL
    if: ${{ inputs.test_cases_sync == 'true' }}
    id: pr_url_step
    shell: bash
    run: |
      echo "NUnit_PR_URL=${{ steps.create_pr.outputs.pull-request-url }}" >> $GITHUB_OUTPUT
      echo "NUnit PR URL: ${{ steps.create_pr.outputs.pull-request-url }}" >> $GITHUB_STEP_SUMMARY

  - name: Output Test Results URL
    env:
      ADO_PROJECT_URL: ${{ inputs.ado_project_url }}
    if: ${{ inputs.test_results_sync == 'true' }}
    id: ado_run_step
    shell: bash
    run: |
      ADO_RUN_ID=$(echo ${{ env.ADO_SUITE_RUN_URL }} | awk -F'=' '{print $2;}' | sed 's|&_a||g')
      echo "ADO TEST RUN URL: ${ADO_PROJECT_URL}/_testManagement/runs?_a=runQuery" >> $GITHUB_STEP_SUMMARY
      echo "ADO_PROJECT_URL=${ADO_PROJECT_URL}/_testManagement/runs?_a=runQuery" >> $GITHUB_OUTPUT
